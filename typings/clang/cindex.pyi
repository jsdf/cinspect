from typing import Any, Iterator, List, Optional
from ctypes import Structure, POINTER, c_int

class SourceLocation(Structure):
    @property
    def file(self) -> str: ...
    @property
    def line(self) -> int: ...
    @property
    def column(self) -> int: ...
    @property
    def offset(self) -> int: ...

class ClangObject(object):
    def __init__(self, obj: POINTER) -> None: ...
    def from_param(self) -> ClangObject: ...

class Diagnostic(object):
    @property
    def severity(self) -> int: ...
    @property
    def location(self) -> SourceLocation: ...
    @property
    def spelling(self) -> str: ...

class DiagIterator(object):
    def __init__(self, tu) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key) -> Diagnostic: ...

class TranslationUnit(ClangObject):
    @property
    def diagnostics(self) -> DiagIterator: ...
    @property
    def cursor(self) -> Cursor: ...

class Index(ClangObject):
    @staticmethod
    def create(excludeDecls=False) -> Index: ...
    def parse(
        self,
        path: str,
        args: List[str] | None = None,
        unsaved_files: Any | None = None,
        options: int = 0,
    ) -> TranslationUnit: ...

class Cursor(Structure): ...

class Type(Structure):
    def get_children(self) -> Iterator[Cursor]: ...

class BaseEnumeration(object): ...
class CursorKind(BaseEnumeration): ...
